name: EDD
on:
  workflow_call:
    inputs:
      slug:
        required:  true
        type: string
      source_url:
        required: true
        type: string
      endpoint_url:
        required: true
        type: string
      method:
        required: false
        type: string
        default: 'POST'
      changelog_extract:
        default: "'/^#### / { if (p) { exit }; if ($2 == ver) { p=1; next } } p && NF'"
        type: string
    outputs:
      updated:
        description: "If the update didnt exist and was built"
        value: ${{ jobs.build.outputs.updated }}
      version:
        description: "The updated version"
        value: ${{ jobs.build.outputs.version }}
    secrets:
      LICENSE_KEY:
        required: true

jobs:
  build:
    name: Update plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      updated: ${{ steps.update.outputs.updated }}
      version: ${{ steps.update.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2

      # See https://easydigitaldownloads.com/docs/software-licensing-api/
      - name: Retrieve the license information (POST)
        if: ${{ inputs.method == 'POST' }}
        run: |
          {
            curl -s -d "edd_action=get_version&license=${{ secrets.LICENSE_KEY }}&item_name=${{ inputs.slug }}&url=${{ inputs.source_url }}" ${{ inputs.endpoint_url }}
          } > "/tmp/remote-response.json"

      # See https://easydigitaldownloads.com/docs/software-licensing-api/
      - name: Retrieve the license information (GET)
        if: ${{ inputs.method == 'GET' }}
        run: |
          {
            curl -s \
              --get \
              --data-urlencode "edd_action=get_version" \
              --data-urlencode "license=${{ secrets.LICENSE_KEY }}" \
              --data-urlencode "item_name=${{ inputs.slug }}" \
              --data-urlencode "url=${{ inputs.source_url }}" \
              "${{ inputs.endpoint_url }}"
          } > "/tmp/remote-response.json"

      - name: Read remote response
        id: remote
        run: |
          {
            echo 'REMOTE_RESPONSE<<EOF'
            cat /tmp/remote-response.json
            echo -e "\n"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Read changelog
        run: |
          {
            php -r '
              $json = json_decode(file_get_contents("/tmp/remote-response.json") ?: "");
              echo @unserialize($json->sections ?? "")["changelog"] ?? "";
            '
          } > changelog.html

      - name: Convert changelog to markdown
        uses: docker://pandoc/core:2.9
        with:
          args: >-
            --from=html
            --to=markdown
            --output=changelog.md
            changelog.html

      - name: Cleanup
        run: |
          mv changelog.md /tmp/changelog.md
          rm changelog.html

      - name: Log response
        run: |
          echo "Download link: ${{ fromJson(steps.remote.outputs.REMOTE_RESPONSE).download_link }}"
          echo "New version: ${{ fromJson(steps.remote.outputs.REMOTE_RESPONSE).new_version }}"
          echo "Changelog:"
          cat /tmp/changelog.md

      - name: Update repo
        uses: generoi/github-action-update-plugins@master
        id: update
        with:
          download_url: ${{ fromJson(steps.remote.outputs.REMOTE_RESPONSE).download_link }}
          version: ${{ fromJson(steps.remote.outputs.REMOTE_RESPONSE).new_version }}
          changelog_extract: |-
            awk -v ver=${{ fromJson(steps.remote.outputs.REMOTE_RESPONSE).new_version }} ${{ inputs.changelog_extract }} /tmp/changelog.md 2>&1
